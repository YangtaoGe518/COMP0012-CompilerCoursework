import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  public boolean syntaxErrors = false;

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    report_error(
      "Syntax error at line " + (current_token.left+1) + ", column "
      + current_token.right + ". ", null
    );
    syntaxErrors = true;
}

:};

terminal MAIN, CHAR, INT, RAT, FLOAT, SEQ, LEN, IN, BOOL;
terminal TDEF, ALIAS;
terminal READ, PRINT, IF, FI, THEN, ELSE, LOOP, POOL, BREAK, RETURN;
terminal LOGNEGATION, DOUBLEAND, OR;
terminal PLUS, MINUS, TIMES, DIV;
terminal SIMICOLON, COLON, DOUBLECOL, DOT;
terminal LSQRBRK, RSQRBRK, LBRK, RBRK, LPAR, RPAR;
terminal LESS, LESSEQ, EQ, NEQ;
terminal ASSIGNMENT;
terminal STRING_LITERAL, INTEGER_LITERAL;
terminal IDENTIFIER;

nonterminal statements, statement, top_level;
nonterminal let_bind, full_exp, simple_exp, operator;


